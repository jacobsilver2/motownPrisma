// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  album: (where?: AlbumWhereInput) => Promise<boolean>;
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  recording: (where?: RecordingWhereInput) => Promise<boolean>;
  song: (where?: SongWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  album: (where: AlbumWhereUniqueInput) => AlbumNullablePromise;
  albums: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Album>;
  albumsConnection: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlbumConnectionPromise;
  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  recording: (where: RecordingWhereUniqueInput) => RecordingNullablePromise;
  recordings: (args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recording>;
  recordingsConnection: (args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecordingConnectionPromise;
  song: (where: SongWhereUniqueInput) => SongNullablePromise;
  songs: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Song>;
  songsConnection: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SongConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlbum: (data: AlbumCreateInput) => AlbumPromise;
  updateAlbum: (args: {
    data: AlbumUpdateInput;
    where: AlbumWhereUniqueInput;
  }) => AlbumPromise;
  updateManyAlbums: (args: {
    data: AlbumUpdateManyMutationInput;
    where?: AlbumWhereInput;
  }) => BatchPayloadPromise;
  upsertAlbum: (args: {
    where: AlbumWhereUniqueInput;
    create: AlbumCreateInput;
    update: AlbumUpdateInput;
  }) => AlbumPromise;
  deleteAlbum: (where: AlbumWhereUniqueInput) => AlbumPromise;
  deleteManyAlbums: (where?: AlbumWhereInput) => BatchPayloadPromise;
  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createRecording: (data: RecordingCreateInput) => RecordingPromise;
  updateRecording: (args: {
    data: RecordingUpdateInput;
    where: RecordingWhereUniqueInput;
  }) => RecordingPromise;
  updateManyRecordings: (args: {
    data: RecordingUpdateManyMutationInput;
    where?: RecordingWhereInput;
  }) => BatchPayloadPromise;
  upsertRecording: (args: {
    where: RecordingWhereUniqueInput;
    create: RecordingCreateInput;
    update: RecordingUpdateInput;
  }) => RecordingPromise;
  deleteRecording: (where: RecordingWhereUniqueInput) => RecordingPromise;
  deleteManyRecordings: (where?: RecordingWhereInput) => BatchPayloadPromise;
  createSong: (data: SongCreateInput) => SongPromise;
  updateSong: (args: {
    data: SongUpdateInput;
    where: SongWhereUniqueInput;
  }) => SongPromise;
  updateManySongs: (args: {
    data: SongUpdateManyMutationInput;
    where?: SongWhereInput;
  }) => BatchPayloadPromise;
  upsertSong: (args: {
    where: SongWhereUniqueInput;
    create: SongCreateInput;
    update: SongUpdateInput;
  }) => SongPromise;
  deleteSong: (where: SongWhereUniqueInput) => SongPromise;
  deleteManySongs: (where?: SongWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  album: (
    where?: AlbumSubscriptionWhereInput
  ) => AlbumSubscriptionPayloadSubscription;
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  recording: (
    where?: RecordingSubscriptionWhereInput
  ) => RecordingSubscriptionPayloadSubscription;
  song: (
    where?: SongSubscriptionWhereInput
  ) => SongSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SongOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "composer_ASC"
  | "composer_DESC"
  | "publisher_ASC"
  | "publisher_DESC"
  | "publishedDate_ASC"
  | "publishedDate_DESC"
  | "altTitle_ASC"
  | "altTitle_DESC"
  | "instrumental_ASC"
  | "instrumental_DESC"
  | "fromFilm_ASC"
  | "fromFilm_DESC"
  | "tribute_ASC"
  | "tribute_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type AlbumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "catalogNumber_ASC"
  | "catalogNumber_DESC"
  | "format_ASC"
  | "format_DESC"
  | "info_ASC"
  | "info_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "recordLabel_ASC"
  | "recordLabel_DESC";

export type RecordingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "producer_ASC"
  | "producer_DESC"
  | "location_ASC"
  | "location_DESC"
  | "completed_ASC"
  | "completed_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AlbumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  catalogNumber?: Maybe<String>;
  info?: Maybe<String>;
}>;

export interface SongWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  composer?: Maybe<String>;
  composer_not?: Maybe<String>;
  composer_in?: Maybe<String[] | String>;
  composer_not_in?: Maybe<String[] | String>;
  composer_lt?: Maybe<String>;
  composer_lte?: Maybe<String>;
  composer_gt?: Maybe<String>;
  composer_gte?: Maybe<String>;
  composer_contains?: Maybe<String>;
  composer_not_contains?: Maybe<String>;
  composer_starts_with?: Maybe<String>;
  composer_not_starts_with?: Maybe<String>;
  composer_ends_with?: Maybe<String>;
  composer_not_ends_with?: Maybe<String>;
  publisher?: Maybe<String>;
  publisher_not?: Maybe<String>;
  publisher_in?: Maybe<String[] | String>;
  publisher_not_in?: Maybe<String[] | String>;
  publisher_lt?: Maybe<String>;
  publisher_lte?: Maybe<String>;
  publisher_gt?: Maybe<String>;
  publisher_gte?: Maybe<String>;
  publisher_contains?: Maybe<String>;
  publisher_not_contains?: Maybe<String>;
  publisher_starts_with?: Maybe<String>;
  publisher_not_starts_with?: Maybe<String>;
  publisher_ends_with?: Maybe<String>;
  publisher_not_ends_with?: Maybe<String>;
  publishedDate?: Maybe<String>;
  publishedDate_not?: Maybe<String>;
  publishedDate_in?: Maybe<String[] | String>;
  publishedDate_not_in?: Maybe<String[] | String>;
  publishedDate_lt?: Maybe<String>;
  publishedDate_lte?: Maybe<String>;
  publishedDate_gt?: Maybe<String>;
  publishedDate_gte?: Maybe<String>;
  publishedDate_contains?: Maybe<String>;
  publishedDate_not_contains?: Maybe<String>;
  publishedDate_starts_with?: Maybe<String>;
  publishedDate_not_starts_with?: Maybe<String>;
  publishedDate_ends_with?: Maybe<String>;
  publishedDate_not_ends_with?: Maybe<String>;
  altTitle?: Maybe<String>;
  altTitle_not?: Maybe<String>;
  altTitle_in?: Maybe<String[] | String>;
  altTitle_not_in?: Maybe<String[] | String>;
  altTitle_lt?: Maybe<String>;
  altTitle_lte?: Maybe<String>;
  altTitle_gt?: Maybe<String>;
  altTitle_gte?: Maybe<String>;
  altTitle_contains?: Maybe<String>;
  altTitle_not_contains?: Maybe<String>;
  altTitle_starts_with?: Maybe<String>;
  altTitle_not_starts_with?: Maybe<String>;
  altTitle_ends_with?: Maybe<String>;
  altTitle_not_ends_with?: Maybe<String>;
  instrumental?: Maybe<String>;
  instrumental_not?: Maybe<String>;
  instrumental_in?: Maybe<String[] | String>;
  instrumental_not_in?: Maybe<String[] | String>;
  instrumental_lt?: Maybe<String>;
  instrumental_lte?: Maybe<String>;
  instrumental_gt?: Maybe<String>;
  instrumental_gte?: Maybe<String>;
  instrumental_contains?: Maybe<String>;
  instrumental_not_contains?: Maybe<String>;
  instrumental_starts_with?: Maybe<String>;
  instrumental_not_starts_with?: Maybe<String>;
  instrumental_ends_with?: Maybe<String>;
  instrumental_not_ends_with?: Maybe<String>;
  fromFilm?: Maybe<String>;
  fromFilm_not?: Maybe<String>;
  fromFilm_in?: Maybe<String[] | String>;
  fromFilm_not_in?: Maybe<String[] | String>;
  fromFilm_lt?: Maybe<String>;
  fromFilm_lte?: Maybe<String>;
  fromFilm_gt?: Maybe<String>;
  fromFilm_gte?: Maybe<String>;
  fromFilm_contains?: Maybe<String>;
  fromFilm_not_contains?: Maybe<String>;
  fromFilm_starts_with?: Maybe<String>;
  fromFilm_not_starts_with?: Maybe<String>;
  fromFilm_ends_with?: Maybe<String>;
  fromFilm_not_ends_with?: Maybe<String>;
  tribute?: Maybe<String>;
  tribute_not?: Maybe<String>;
  tribute_in?: Maybe<String[] | String>;
  tribute_not_in?: Maybe<String[] | String>;
  tribute_lt?: Maybe<String>;
  tribute_lte?: Maybe<String>;
  tribute_gt?: Maybe<String>;
  tribute_gte?: Maybe<String>;
  tribute_contains?: Maybe<String>;
  tribute_not_contains?: Maybe<String>;
  tribute_starts_with?: Maybe<String>;
  tribute_not_starts_with?: Maybe<String>;
  tribute_ends_with?: Maybe<String>;
  tribute_not_ends_with?: Maybe<String>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<SongWhereInput[] | SongWhereInput>;
  OR?: Maybe<SongWhereInput[] | SongWhereInput>;
  NOT?: Maybe<SongWhereInput[] | SongWhereInput>;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface AlbumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  catalogNumber_not?: Maybe<String>;
  catalogNumber_in?: Maybe<String[] | String>;
  catalogNumber_not_in?: Maybe<String[] | String>;
  catalogNumber_lt?: Maybe<String>;
  catalogNumber_lte?: Maybe<String>;
  catalogNumber_gt?: Maybe<String>;
  catalogNumber_gte?: Maybe<String>;
  catalogNumber_contains?: Maybe<String>;
  catalogNumber_not_contains?: Maybe<String>;
  catalogNumber_starts_with?: Maybe<String>;
  catalogNumber_not_starts_with?: Maybe<String>;
  catalogNumber_ends_with?: Maybe<String>;
  catalogNumber_not_ends_with?: Maybe<String>;
  format?: Maybe<String>;
  format_not?: Maybe<String>;
  format_in?: Maybe<String[] | String>;
  format_not_in?: Maybe<String[] | String>;
  format_lt?: Maybe<String>;
  format_lte?: Maybe<String>;
  format_gt?: Maybe<String>;
  format_gte?: Maybe<String>;
  format_contains?: Maybe<String>;
  format_not_contains?: Maybe<String>;
  format_starts_with?: Maybe<String>;
  format_not_starts_with?: Maybe<String>;
  format_ends_with?: Maybe<String>;
  format_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<String>;
  releaseDate_not?: Maybe<String>;
  releaseDate_in?: Maybe<String[] | String>;
  releaseDate_not_in?: Maybe<String[] | String>;
  releaseDate_lt?: Maybe<String>;
  releaseDate_lte?: Maybe<String>;
  releaseDate_gt?: Maybe<String>;
  releaseDate_gte?: Maybe<String>;
  releaseDate_contains?: Maybe<String>;
  releaseDate_not_contains?: Maybe<String>;
  releaseDate_starts_with?: Maybe<String>;
  releaseDate_not_starts_with?: Maybe<String>;
  releaseDate_ends_with?: Maybe<String>;
  releaseDate_not_ends_with?: Maybe<String>;
  recordLabel?: Maybe<String>;
  recordLabel_not?: Maybe<String>;
  recordLabel_in?: Maybe<String[] | String>;
  recordLabel_not_in?: Maybe<String[] | String>;
  recordLabel_lt?: Maybe<String>;
  recordLabel_lte?: Maybe<String>;
  recordLabel_gt?: Maybe<String>;
  recordLabel_gte?: Maybe<String>;
  recordLabel_contains?: Maybe<String>;
  recordLabel_not_contains?: Maybe<String>;
  recordLabel_starts_with?: Maybe<String>;
  recordLabel_not_starts_with?: Maybe<String>;
  recordLabel_ends_with?: Maybe<String>;
  recordLabel_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  OR?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  NOT?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
}

export interface RecordingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  producer_not?: Maybe<String>;
  producer_in?: Maybe<String[] | String>;
  producer_not_in?: Maybe<String[] | String>;
  producer_lt?: Maybe<String>;
  producer_lte?: Maybe<String>;
  producer_gt?: Maybe<String>;
  producer_gte?: Maybe<String>;
  producer_contains?: Maybe<String>;
  producer_not_contains?: Maybe<String>;
  producer_starts_with?: Maybe<String>;
  producer_not_starts_with?: Maybe<String>;
  producer_ends_with?: Maybe<String>;
  producer_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  completed?: Maybe<String>;
  completed_not?: Maybe<String>;
  completed_in?: Maybe<String[] | String>;
  completed_not_in?: Maybe<String[] | String>;
  completed_lt?: Maybe<String>;
  completed_lte?: Maybe<String>;
  completed_gt?: Maybe<String>;
  completed_gte?: Maybe<String>;
  completed_contains?: Maybe<String>;
  completed_not_contains?: Maybe<String>;
  completed_starts_with?: Maybe<String>;
  completed_not_starts_with?: Maybe<String>;
  completed_ends_with?: Maybe<String>;
  completed_not_ends_with?: Maybe<String>;
  artist?: Maybe<ArtistWhereInput>;
  song?: Maybe<SongWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  AND?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
  OR?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
  NOT?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
}

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type RecordingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SongWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface AlbumCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface SongCreateManyWithoutAlbumsInput {
  create?: Maybe<SongCreateWithoutAlbumsInput[] | SongCreateWithoutAlbumsInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface SongCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface ArtistCreateManyWithoutSongsInput {
  create?: Maybe<
    ArtistCreateWithoutSongsInput[] | ArtistCreateWithoutSongsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutSongsInput {
  id?: Maybe<ID_Input>;
  name: String;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface AlbumCreateManyWithoutArtistsInput {
  create?: Maybe<
    AlbumCreateWithoutArtistsInput[] | AlbumCreateWithoutArtistsInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface RecordingCreateManyWithoutAlbumsInput {
  create?: Maybe<
    RecordingCreateWithoutAlbumsInput[] | RecordingCreateWithoutAlbumsInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface RecordingCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  song: SongCreateOneWithoutRecordingsInput;
}

export interface ArtistCreateOneWithoutRecordingsInput {
  create?: Maybe<ArtistCreateWithoutRecordingsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
}

export interface SongCreateManyWithoutArtistsInput {
  create?: Maybe<
    SongCreateWithoutArtistsInput[] | SongCreateWithoutArtistsInput
  >;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface SongCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface AlbumCreateManyWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput[] | AlbumCreateWithoutSongsInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumCreateWithoutSongsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface ArtistCreateManyWithoutAlbumsInput {
  create?: Maybe<
    ArtistCreateWithoutAlbumsInput[] | ArtistCreateWithoutAlbumsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface RecordingCreateManyWithoutArtistInput {
  create?: Maybe<
    RecordingCreateWithoutArtistInput[] | RecordingCreateWithoutArtistInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface RecordingCreateWithoutArtistInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  song: SongCreateOneWithoutRecordingsInput;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface SongCreateOneWithoutRecordingsInput {
  create?: Maybe<SongCreateWithoutRecordingsInput>;
  connect?: Maybe<SongWhereUniqueInput>;
}

export interface SongCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
}

export interface AlbumCreateManyWithoutRecordingsInput {
  create?: Maybe<
    AlbumCreateWithoutRecordingsInput[] | AlbumCreateWithoutRecordingsInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
}

export interface RecordingCreateManyWithoutSongInput {
  create?: Maybe<
    RecordingCreateWithoutSongInput[] | RecordingCreateWithoutSongInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface RecordingCreateWithoutSongInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface AlbumUpdateInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export interface SongUpdateManyWithoutAlbumsInput {
  create?: Maybe<SongCreateWithoutAlbumsInput[] | SongCreateWithoutAlbumsInput>;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutAlbumsInput[]
    | SongUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutAlbumsInput[]
    | SongUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutAlbumsInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutAlbumsDataInput;
}

export interface SongUpdateWithoutAlbumsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface ArtistUpdateManyWithoutSongsInput {
  create?: Maybe<
    ArtistCreateWithoutSongsInput[] | ArtistCreateWithoutSongsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutSongsInput[]
    | ArtistUpdateWithWhereUniqueWithoutSongsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutSongsInput[]
    | ArtistUpsertWithWhereUniqueWithoutSongsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateWithWhereUniqueWithoutSongsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutSongsDataInput;
}

export interface ArtistUpdateWithoutSongsDataInput {
  name?: Maybe<String>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface AlbumUpdateManyWithoutArtistsInput {
  create?: Maybe<
    AlbumCreateWithoutArtistsInput[] | AlbumCreateWithoutArtistsInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutArtistsInput[]
    | AlbumUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutArtistsInput[]
    | AlbumUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutArtistsDataInput;
}

export interface AlbumUpdateWithoutArtistsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export interface RecordingUpdateManyWithoutAlbumsInput {
  create?: Maybe<
    RecordingCreateWithoutAlbumsInput[] | RecordingCreateWithoutAlbumsInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutAlbumsInput[]
    | RecordingUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutAlbumsInput[]
    | RecordingUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingUpdateWithWhereUniqueWithoutAlbumsInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutAlbumsDataInput;
}

export interface RecordingUpdateWithoutAlbumsDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
}

export interface ArtistUpdateOneWithoutRecordingsInput {
  create?: Maybe<ArtistCreateWithoutRecordingsInput>;
  update?: Maybe<ArtistUpdateWithoutRecordingsDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutRecordingsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistUpdateWithoutRecordingsDataInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
}

export interface SongUpdateManyWithoutArtistsInput {
  create?: Maybe<
    SongCreateWithoutArtistsInput[] | SongCreateWithoutArtistsInput
  >;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutArtistsInput[]
    | SongUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutArtistsInput[]
    | SongUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutArtistsInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutArtistsDataInput;
}

export interface SongUpdateWithoutArtistsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface AlbumUpdateManyWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput[] | AlbumCreateWithoutSongsInput>;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutSongsInput[]
    | AlbumUpdateWithWhereUniqueWithoutSongsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutSongsInput[]
    | AlbumUpsertWithWhereUniqueWithoutSongsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateWithWhereUniqueWithoutSongsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutSongsDataInput;
}

export interface AlbumUpdateWithoutSongsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export interface ArtistUpdateManyWithoutAlbumsInput {
  create?: Maybe<
    ArtistCreateWithoutAlbumsInput[] | ArtistCreateWithoutAlbumsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutAlbumsInput[]
    | ArtistUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutAlbumsInput[]
    | ArtistUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface ArtistUpdateWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutAlbumsDataInput;
}

export interface ArtistUpdateWithoutAlbumsDataInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface RecordingUpdateManyWithoutArtistInput {
  create?: Maybe<
    RecordingCreateWithoutArtistInput[] | RecordingCreateWithoutArtistInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutArtistInput[]
    | RecordingUpdateWithWhereUniqueWithoutArtistInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutArtistInput[]
    | RecordingUpsertWithWhereUniqueWithoutArtistInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingUpdateWithWhereUniqueWithoutArtistInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutArtistDataInput;
}

export interface RecordingUpdateWithoutArtistDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface SongUpdateOneRequiredWithoutRecordingsInput {
  create?: Maybe<SongCreateWithoutRecordingsInput>;
  update?: Maybe<SongUpdateWithoutRecordingsDataInput>;
  upsert?: Maybe<SongUpsertWithoutRecordingsInput>;
  connect?: Maybe<SongWhereUniqueInput>;
}

export interface SongUpdateWithoutRecordingsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
}

export interface SongUpsertWithoutRecordingsInput {
  update: SongUpdateWithoutRecordingsDataInput;
  create: SongCreateWithoutRecordingsInput;
}

export interface AlbumUpdateManyWithoutRecordingsInput {
  create?: Maybe<
    AlbumCreateWithoutRecordingsInput[] | AlbumCreateWithoutRecordingsInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutRecordingsInput[]
    | AlbumUpdateWithWhereUniqueWithoutRecordingsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutRecordingsInput[]
    | AlbumUpsertWithWhereUniqueWithoutRecordingsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateWithWhereUniqueWithoutRecordingsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutRecordingsDataInput;
}

export interface AlbumUpdateWithoutRecordingsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
}

export interface AlbumUpsertWithWhereUniqueWithoutRecordingsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutRecordingsDataInput;
  create: AlbumCreateWithoutRecordingsInput;
}

export interface AlbumScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  catalogNumber_not?: Maybe<String>;
  catalogNumber_in?: Maybe<String[] | String>;
  catalogNumber_not_in?: Maybe<String[] | String>;
  catalogNumber_lt?: Maybe<String>;
  catalogNumber_lte?: Maybe<String>;
  catalogNumber_gt?: Maybe<String>;
  catalogNumber_gte?: Maybe<String>;
  catalogNumber_contains?: Maybe<String>;
  catalogNumber_not_contains?: Maybe<String>;
  catalogNumber_starts_with?: Maybe<String>;
  catalogNumber_not_starts_with?: Maybe<String>;
  catalogNumber_ends_with?: Maybe<String>;
  catalogNumber_not_ends_with?: Maybe<String>;
  format?: Maybe<String>;
  format_not?: Maybe<String>;
  format_in?: Maybe<String[] | String>;
  format_not_in?: Maybe<String[] | String>;
  format_lt?: Maybe<String>;
  format_lte?: Maybe<String>;
  format_gt?: Maybe<String>;
  format_gte?: Maybe<String>;
  format_contains?: Maybe<String>;
  format_not_contains?: Maybe<String>;
  format_starts_with?: Maybe<String>;
  format_not_starts_with?: Maybe<String>;
  format_ends_with?: Maybe<String>;
  format_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<String>;
  releaseDate_not?: Maybe<String>;
  releaseDate_in?: Maybe<String[] | String>;
  releaseDate_not_in?: Maybe<String[] | String>;
  releaseDate_lt?: Maybe<String>;
  releaseDate_lte?: Maybe<String>;
  releaseDate_gt?: Maybe<String>;
  releaseDate_gte?: Maybe<String>;
  releaseDate_contains?: Maybe<String>;
  releaseDate_not_contains?: Maybe<String>;
  releaseDate_starts_with?: Maybe<String>;
  releaseDate_not_starts_with?: Maybe<String>;
  releaseDate_ends_with?: Maybe<String>;
  releaseDate_not_ends_with?: Maybe<String>;
  recordLabel?: Maybe<String>;
  recordLabel_not?: Maybe<String>;
  recordLabel_in?: Maybe<String[] | String>;
  recordLabel_not_in?: Maybe<String[] | String>;
  recordLabel_lt?: Maybe<String>;
  recordLabel_lte?: Maybe<String>;
  recordLabel_gt?: Maybe<String>;
  recordLabel_gte?: Maybe<String>;
  recordLabel_contains?: Maybe<String>;
  recordLabel_not_contains?: Maybe<String>;
  recordLabel_starts_with?: Maybe<String>;
  recordLabel_not_starts_with?: Maybe<String>;
  recordLabel_ends_with?: Maybe<String>;
  recordLabel_not_ends_with?: Maybe<String>;
  AND?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  OR?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  NOT?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
}

export interface AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput;
  data: AlbumUpdateManyDataInput;
}

export interface AlbumUpdateManyDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
}

export interface RecordingUpsertWithWhereUniqueWithoutArtistInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutArtistDataInput;
  create: RecordingCreateWithoutArtistInput;
}

export interface RecordingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  producer_not?: Maybe<String>;
  producer_in?: Maybe<String[] | String>;
  producer_not_in?: Maybe<String[] | String>;
  producer_lt?: Maybe<String>;
  producer_lte?: Maybe<String>;
  producer_gt?: Maybe<String>;
  producer_gte?: Maybe<String>;
  producer_contains?: Maybe<String>;
  producer_not_contains?: Maybe<String>;
  producer_starts_with?: Maybe<String>;
  producer_not_starts_with?: Maybe<String>;
  producer_ends_with?: Maybe<String>;
  producer_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  completed?: Maybe<String>;
  completed_not?: Maybe<String>;
  completed_in?: Maybe<String[] | String>;
  completed_not_in?: Maybe<String[] | String>;
  completed_lt?: Maybe<String>;
  completed_lte?: Maybe<String>;
  completed_gt?: Maybe<String>;
  completed_gte?: Maybe<String>;
  completed_contains?: Maybe<String>;
  completed_not_contains?: Maybe<String>;
  completed_starts_with?: Maybe<String>;
  completed_not_starts_with?: Maybe<String>;
  completed_ends_with?: Maybe<String>;
  completed_not_ends_with?: Maybe<String>;
  AND?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  OR?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  NOT?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
}

export interface RecordingUpdateManyWithWhereNestedInput {
  where: RecordingScalarWhereInput;
  data: RecordingUpdateManyDataInput;
}

export interface RecordingUpdateManyDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
}

export interface ArtistUpsertWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutAlbumsDataInput;
  create: ArtistCreateWithoutAlbumsInput;
}

export interface ArtistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  OR?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  NOT?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
}

export interface ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput;
  data: ArtistUpdateManyDataInput;
}

export interface ArtistUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface AlbumUpsertWithWhereUniqueWithoutSongsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutSongsDataInput;
  create: AlbumCreateWithoutSongsInput;
}

export interface RecordingUpdateManyWithoutSongInput {
  create?: Maybe<
    RecordingCreateWithoutSongInput[] | RecordingCreateWithoutSongInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutSongInput[]
    | RecordingUpdateWithWhereUniqueWithoutSongInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutSongInput[]
    | RecordingUpsertWithWhereUniqueWithoutSongInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingUpdateWithWhereUniqueWithoutSongInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutSongDataInput;
}

export interface RecordingUpdateWithoutSongDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface RecordingUpsertWithWhereUniqueWithoutSongInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutSongDataInput;
  create: RecordingCreateWithoutSongInput;
}

export interface SongUpsertWithWhereUniqueWithoutArtistsInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutArtistsDataInput;
  create: SongCreateWithoutArtistsInput;
}

export interface SongScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  composer?: Maybe<String>;
  composer_not?: Maybe<String>;
  composer_in?: Maybe<String[] | String>;
  composer_not_in?: Maybe<String[] | String>;
  composer_lt?: Maybe<String>;
  composer_lte?: Maybe<String>;
  composer_gt?: Maybe<String>;
  composer_gte?: Maybe<String>;
  composer_contains?: Maybe<String>;
  composer_not_contains?: Maybe<String>;
  composer_starts_with?: Maybe<String>;
  composer_not_starts_with?: Maybe<String>;
  composer_ends_with?: Maybe<String>;
  composer_not_ends_with?: Maybe<String>;
  publisher?: Maybe<String>;
  publisher_not?: Maybe<String>;
  publisher_in?: Maybe<String[] | String>;
  publisher_not_in?: Maybe<String[] | String>;
  publisher_lt?: Maybe<String>;
  publisher_lte?: Maybe<String>;
  publisher_gt?: Maybe<String>;
  publisher_gte?: Maybe<String>;
  publisher_contains?: Maybe<String>;
  publisher_not_contains?: Maybe<String>;
  publisher_starts_with?: Maybe<String>;
  publisher_not_starts_with?: Maybe<String>;
  publisher_ends_with?: Maybe<String>;
  publisher_not_ends_with?: Maybe<String>;
  publishedDate?: Maybe<String>;
  publishedDate_not?: Maybe<String>;
  publishedDate_in?: Maybe<String[] | String>;
  publishedDate_not_in?: Maybe<String[] | String>;
  publishedDate_lt?: Maybe<String>;
  publishedDate_lte?: Maybe<String>;
  publishedDate_gt?: Maybe<String>;
  publishedDate_gte?: Maybe<String>;
  publishedDate_contains?: Maybe<String>;
  publishedDate_not_contains?: Maybe<String>;
  publishedDate_starts_with?: Maybe<String>;
  publishedDate_not_starts_with?: Maybe<String>;
  publishedDate_ends_with?: Maybe<String>;
  publishedDate_not_ends_with?: Maybe<String>;
  altTitle?: Maybe<String>;
  altTitle_not?: Maybe<String>;
  altTitle_in?: Maybe<String[] | String>;
  altTitle_not_in?: Maybe<String[] | String>;
  altTitle_lt?: Maybe<String>;
  altTitle_lte?: Maybe<String>;
  altTitle_gt?: Maybe<String>;
  altTitle_gte?: Maybe<String>;
  altTitle_contains?: Maybe<String>;
  altTitle_not_contains?: Maybe<String>;
  altTitle_starts_with?: Maybe<String>;
  altTitle_not_starts_with?: Maybe<String>;
  altTitle_ends_with?: Maybe<String>;
  altTitle_not_ends_with?: Maybe<String>;
  instrumental?: Maybe<String>;
  instrumental_not?: Maybe<String>;
  instrumental_in?: Maybe<String[] | String>;
  instrumental_not_in?: Maybe<String[] | String>;
  instrumental_lt?: Maybe<String>;
  instrumental_lte?: Maybe<String>;
  instrumental_gt?: Maybe<String>;
  instrumental_gte?: Maybe<String>;
  instrumental_contains?: Maybe<String>;
  instrumental_not_contains?: Maybe<String>;
  instrumental_starts_with?: Maybe<String>;
  instrumental_not_starts_with?: Maybe<String>;
  instrumental_ends_with?: Maybe<String>;
  instrumental_not_ends_with?: Maybe<String>;
  fromFilm?: Maybe<String>;
  fromFilm_not?: Maybe<String>;
  fromFilm_in?: Maybe<String[] | String>;
  fromFilm_not_in?: Maybe<String[] | String>;
  fromFilm_lt?: Maybe<String>;
  fromFilm_lte?: Maybe<String>;
  fromFilm_gt?: Maybe<String>;
  fromFilm_gte?: Maybe<String>;
  fromFilm_contains?: Maybe<String>;
  fromFilm_not_contains?: Maybe<String>;
  fromFilm_starts_with?: Maybe<String>;
  fromFilm_not_starts_with?: Maybe<String>;
  fromFilm_ends_with?: Maybe<String>;
  fromFilm_not_ends_with?: Maybe<String>;
  tribute?: Maybe<String>;
  tribute_not?: Maybe<String>;
  tribute_in?: Maybe<String[] | String>;
  tribute_not_in?: Maybe<String[] | String>;
  tribute_lt?: Maybe<String>;
  tribute_lte?: Maybe<String>;
  tribute_gt?: Maybe<String>;
  tribute_gte?: Maybe<String>;
  tribute_contains?: Maybe<String>;
  tribute_not_contains?: Maybe<String>;
  tribute_starts_with?: Maybe<String>;
  tribute_not_starts_with?: Maybe<String>;
  tribute_ends_with?: Maybe<String>;
  tribute_not_ends_with?: Maybe<String>;
  AND?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  OR?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  NOT?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
}

export interface SongUpdateManyWithWhereNestedInput {
  where: SongScalarWhereInput;
  data: SongUpdateManyDataInput;
}

export interface SongUpdateManyDataInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
}

export interface ArtistUpsertWithoutRecordingsInput {
  update: ArtistUpdateWithoutRecordingsDataInput;
  create: ArtistCreateWithoutRecordingsInput;
}

export interface RecordingUpsertWithWhereUniqueWithoutAlbumsInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutAlbumsDataInput;
  create: RecordingCreateWithoutAlbumsInput;
}

export interface AlbumUpsertWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutArtistsDataInput;
  create: AlbumCreateWithoutArtistsInput;
}

export interface ArtistUpsertWithWhereUniqueWithoutSongsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutSongsDataInput;
  create: ArtistCreateWithoutSongsInput;
}

export interface SongUpsertWithWhereUniqueWithoutAlbumsInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutAlbumsDataInput;
  create: SongCreateWithoutAlbumsInput;
}

export interface AlbumUpdateManyMutationInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<String>;
  recordLabel?: Maybe<String>;
}

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface ArtistUpdateInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface ArtistUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface RecordingCreateInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  song: SongCreateOneWithoutRecordingsInput;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface RecordingUpdateInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface RecordingUpdateManyMutationInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<String>;
}

export interface SongCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface SongUpdateInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface SongUpdateManyMutationInput {
  title?: Maybe<String>;
  composer?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<String>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<String>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
}

export interface AlbumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AlbumWhereInput>;
  AND?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  OR?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  NOT?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface RecordingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecordingWhereInput>;
  AND?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
  OR?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
}

export interface SongSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SongWhereInput>;
  AND?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  OR?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  NOT?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Album {
  id: ID_Output;
  title?: String;
  catalogNumber?: String;
  format?: String;
  info?: String;
  releaseDate?: String;
  recordLabel?: String;
}

export interface AlbumPromise extends Promise<Album>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<String>;
  recordLabel: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumSubscription
  extends Promise<AsyncIterator<Album>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  catalogNumber: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  recordLabel: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumNullablePromise
  extends Promise<Album | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<String>;
  recordLabel: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Song {
  id: ID_Output;
  title: String;
  composer?: String;
  publisher?: String;
  publishedDate?: String;
  altTitle?: String;
  instrumental?: String;
  fromFilm?: String;
  tribute?: String;
}

export interface SongPromise extends Promise<Song>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  composer: () => Promise<String>;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<String>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<String>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SongSubscription
  extends Promise<AsyncIterator<Song>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  composer: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  publishedDate: () => Promise<AsyncIterator<String>>;
  altTitle: () => Promise<AsyncIterator<String>>;
  instrumental: () => Promise<AsyncIterator<String>>;
  fromFilm: () => Promise<AsyncIterator<String>>;
  tribute: () => Promise<AsyncIterator<String>>;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SongNullablePromise
  extends Promise<Song | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  composer: () => Promise<String>;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<String>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<String>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Artist {
  id: ID_Output;
  name: String;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Recording {
  id: ID_Output;
  producer?: String;
  location?: String;
  completed?: String;
}

export interface RecordingPromise extends Promise<Recording>, Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<String>;
  artist: <T = ArtistPromise>() => T;
  song: <T = SongPromise>() => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecordingSubscription
  extends Promise<AsyncIterator<Recording>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  producer: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<String>>;
  artist: <T = ArtistSubscription>() => T;
  song: <T = SongSubscription>() => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecordingNullablePromise
  extends Promise<Recording | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<String>;
  artist: <T = ArtistPromise>() => T;
  song: <T = SongPromise>() => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumConnection {
  pageInfo: PageInfo;
  edges: AlbumEdge[];
}

export interface AlbumConnectionPromise
  extends Promise<AlbumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlbumEdge>>() => T;
  aggregate: <T = AggregateAlbumPromise>() => T;
}

export interface AlbumConnectionSubscription
  extends Promise<AsyncIterator<AlbumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlbumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlbumSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AlbumEdge {
  node: Album;
  cursor: String;
}

export interface AlbumEdgePromise extends Promise<AlbumEdge>, Fragmentable {
  node: <T = AlbumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlbumEdgeSubscription
  extends Promise<AsyncIterator<AlbumEdge>>,
    Fragmentable {
  node: <T = AlbumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAlbum {
  count: Int;
}

export interface AggregateAlbumPromise
  extends Promise<AggregateAlbum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlbumSubscription
  extends Promise<AsyncIterator<AggregateAlbum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecordingConnection {
  pageInfo: PageInfo;
  edges: RecordingEdge[];
}

export interface RecordingConnectionPromise
  extends Promise<RecordingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecordingEdge>>() => T;
  aggregate: <T = AggregateRecordingPromise>() => T;
}

export interface RecordingConnectionSubscription
  extends Promise<AsyncIterator<RecordingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecordingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecordingSubscription>() => T;
}

export interface RecordingEdge {
  node: Recording;
  cursor: String;
}

export interface RecordingEdgePromise
  extends Promise<RecordingEdge>,
    Fragmentable {
  node: <T = RecordingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecordingEdgeSubscription
  extends Promise<AsyncIterator<RecordingEdge>>,
    Fragmentable {
  node: <T = RecordingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecording {
  count: Int;
}

export interface AggregateRecordingPromise
  extends Promise<AggregateRecording>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecordingSubscription
  extends Promise<AsyncIterator<AggregateRecording>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SongConnection {
  pageInfo: PageInfo;
  edges: SongEdge[];
}

export interface SongConnectionPromise
  extends Promise<SongConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SongEdge>>() => T;
  aggregate: <T = AggregateSongPromise>() => T;
}

export interface SongConnectionSubscription
  extends Promise<AsyncIterator<SongConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SongEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSongSubscription>() => T;
}

export interface SongEdge {
  node: Song;
  cursor: String;
}

export interface SongEdgePromise extends Promise<SongEdge>, Fragmentable {
  node: <T = SongPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SongEdgeSubscription
  extends Promise<AsyncIterator<SongEdge>>,
    Fragmentable {
  node: <T = SongSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSong {
  count: Int;
}

export interface AggregateSongPromise
  extends Promise<AggregateSong>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSongSubscription
  extends Promise<AsyncIterator<AggregateSong>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AlbumSubscriptionPayload {
  mutation: MutationType;
  node: Album;
  updatedFields: String[];
  previousValues: AlbumPreviousValues;
}

export interface AlbumSubscriptionPayloadPromise
  extends Promise<AlbumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlbumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlbumPreviousValuesPromise>() => T;
}

export interface AlbumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlbumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlbumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlbumPreviousValuesSubscription>() => T;
}

export interface AlbumPreviousValues {
  id: ID_Output;
  title?: String;
  catalogNumber?: String;
  format?: String;
  info?: String;
  releaseDate?: String;
  recordLabel?: String;
}

export interface AlbumPreviousValuesPromise
  extends Promise<AlbumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<String>;
  recordLabel: () => Promise<String>;
}

export interface AlbumPreviousValuesSubscription
  extends Promise<AsyncIterator<AlbumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  catalogNumber: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  recordLabel: () => Promise<AsyncIterator<String>>;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RecordingSubscriptionPayload {
  mutation: MutationType;
  node: Recording;
  updatedFields: String[];
  previousValues: RecordingPreviousValues;
}

export interface RecordingSubscriptionPayloadPromise
  extends Promise<RecordingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecordingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecordingPreviousValuesPromise>() => T;
}

export interface RecordingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecordingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecordingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecordingPreviousValuesSubscription>() => T;
}

export interface RecordingPreviousValues {
  id: ID_Output;
  producer?: String;
  location?: String;
  completed?: String;
}

export interface RecordingPreviousValuesPromise
  extends Promise<RecordingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<String>;
}

export interface RecordingPreviousValuesSubscription
  extends Promise<AsyncIterator<RecordingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  producer: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<String>>;
}

export interface SongSubscriptionPayload {
  mutation: MutationType;
  node: Song;
  updatedFields: String[];
  previousValues: SongPreviousValues;
}

export interface SongSubscriptionPayloadPromise
  extends Promise<SongSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SongPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SongPreviousValuesPromise>() => T;
}

export interface SongSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SongSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SongSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SongPreviousValuesSubscription>() => T;
}

export interface SongPreviousValues {
  id: ID_Output;
  title: String;
  composer?: String;
  publisher?: String;
  publishedDate?: String;
  altTitle?: String;
  instrumental?: String;
  fromFilm?: String;
  tribute?: String;
}

export interface SongPreviousValuesPromise
  extends Promise<SongPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  composer: () => Promise<String>;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<String>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<String>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
}

export interface SongPreviousValuesSubscription
  extends Promise<AsyncIterator<SongPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  composer: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  publishedDate: () => Promise<AsyncIterator<String>>;
  altTitle: () => Promise<AsyncIterator<String>>;
  instrumental: () => Promise<AsyncIterator<String>>;
  fromFilm: () => Promise<AsyncIterator<String>>;
  tribute: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Song",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "Album",
    embedded: false
  },
  {
    name: "Recording",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
